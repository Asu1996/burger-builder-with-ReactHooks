{"ast":null,"code":"import _defineProperty from\"/home/asutosh/Documents/myReact/burger-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/asutosh/Documents/myReact/burger-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/asutosh/Documents/myReact/burger-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/asutosh/Documents/myReact/burger-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/asutosh/Documents/myReact/burger-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{connect}from'react-redux';import{Redirect}from'react-router-dom';import Input from'../../components/UI/Input/Input';import Button from'../../components/UI/Button/Button';import*as actions from'../../store/actions/index';import Spinner from'../../components/UI/Spinner/Spinner';import{updateObject,checkValidity}from'../../shared/utility';import classes from'./Auth.module.css';var Auth=/*#__PURE__*/function(_Component){_inherits(Auth,_Component);var _super=_createSuper(Auth);function Auth(){var _this;_classCallCheck(this,Auth);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={controls:{email:{elementType:'input',elementConfig:{type:'email',placeholder:'YourMail??'},value:'',validation:{required:true,isEmail:true},valid:false,touched:false},password:{elementType:'input',elementConfig:{type:'password',placeholder:'PASS??'},value:'',validation:{required:true,minLength:6},valid:false,touched:false}},isSignup:true};_this.inputChangedHandler=function(event,controlName){var updatedControls=updateObject(_this.state.controls,_defineProperty({},controlName,updateObject(_this.state.controls[controlName],{value:event.target.value,valid:checkValidity(event.target.value,_this.state.controls[controlName].validation),touched:true})));_this.setState({controls:updatedControls});};_this.submitHandler=function(event){event.preventDefault();_this.props.onAuth(_this.state.controls.email.value,_this.state.controls.password.value,_this.state.isSignup);};_this.switchAuthModeHandler=function(){_this.setState(function(prevState){return{isSignup:!prevState.isSignup};});};return _this;}_createClass(Auth,[{key:\"componentDidMount\",value:function componentDidMount(){if(!this.props.buildingBurger&&this.props.authRedirectPath!=='/'){this.props.onSetAuthRedirectPath();}}},{key:\"render\",value:function render(){var _this2=this;var formElementsArray=[];for(var key in this.state.controls){formElementsArray.push({id:key,config:this.state.controls[key]});}var form=formElementsArray.map(function(formElement){return/*#__PURE__*/React.createElement(Input,{key:formElement.id,elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,value:formElement.config.value,invalid:!formElement.config.valid,shouldValidate:formElement.config.validation,touched:formElement.config.touched,changed:function changed(event){return _this2.inputChangedHandler(event,formElement.id);}});});if(this.props.loading){form=/*#__PURE__*/React.createElement(Spinner,null);}var errorMessage=null;if(this.props.error){errorMessage=/*#__PURE__*/React.createElement(\"p\",null,this.props.error.message);}var authRedirect=null;if(this.props.isAuthenticated){authRedirect=/*#__PURE__*/React.createElement(Redirect,{to:this.props.authRedirectPath});}return/*#__PURE__*/React.createElement(\"div\",{className:classes.Auth},authRedirect,errorMessage,/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.submitHandler},form,/*#__PURE__*/React.createElement(Button,{btnType:\"Success\"},\"SUBMIT\")),/*#__PURE__*/React.createElement(Button,{clicked:this.switchAuthModeHandler,btnType:\"Danger\"},\"switch to \",this.state.isSignup?'sign in!':'sign up!!'));}}]);return Auth;}(Component);var mapStateToProps=function mapStateToProps(state){return{loading:state.auth.loading,error:state.auth.error,isAuthenticated:state.auth.token!==null,buildingBurger:state.burgerBuilder.building,authRedirectPath:state.auth.authRedirectPath};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onAuth:function onAuth(email,password,isSignup){return dispatch(actions.auth(email,password,isSignup));},onSetAuthRedirectPath:function onSetAuthRedirectPath(){return dispatch(actions.setAuthRedirectPath('/'));}};};export default connect(mapStateToProps,mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","actions","Spinner","updateObject","checkValidity","classes","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\n\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport {updateObject, checkValidity} from '../../shared/utility'\n\n\nimport classes from './Auth.module.css'\n\nclass Auth extends Component {\n    \n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'YourMail??'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'PASS??'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup: true\n    };\n\n    componentDidMount() {\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n           this.props.onSetAuthRedirectPath(); \n        }\n\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value, this.state.isSignup)\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        })\n    }\n\n    \n    \n    render() {\n\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} \n            />\n        ));\n\n        if(this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if(this.props.error) {\n            errorMessage = (\n            <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect=null;\n        if(this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button \n                        btnType=\"Success\" >SUBMIT\n                    </Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\" >switch to {this.state.isSignup ? 'sign in!' : 'sign up!!' }\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password,isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}