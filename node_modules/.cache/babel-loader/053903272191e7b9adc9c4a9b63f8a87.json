{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nimport order from '../../components/Order/Order';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json?auth=' + token, orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('/orders.json' + queryParams).then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder-with-ReactHooks/src/store/actions/order.js"],"names":["actionTypes","axios","order","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","dispatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersStart","FETCH_ORDERS_START","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrders","userId","queryParams","get","res","fetchedOrders","key","push","err"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders'\nimport order from '../../components/Order/Order';\n\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData\n    }\n}\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n    }\n}\n\nexport const purchaseBurgerStart =() => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_START\n    }\n}\n\nexport const purchaseBurger = (orderData, token) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n         \n        axios.post( '/orders.json?auth='+token, orderData )\n            .then( response => {\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n                } \n            )\n            .catch( error => {\n                dispatch(purchaseBurgerFail(error));\n                } \n            )\n    }\n}\n\nexport const purchaseInit = () => {\n    return {\n        type: actionTypes.PURCHASE_INIT\n    }\n}\n\nexport const fetchOrdersStart = () => {\n    return{\n        type: actionTypes.FETCH_ORDERS_START\n    }\n}\n\nexport const fetchOrdersSuccess = (orders) => {\n    return{\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    }\n}\n\nexport const fetchOrdersFail = (error) => {\n    return{\n        type: actionTypes.FETCH_ORDERS_FAIL,\n        error: error\n    }\n}\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n        axios.get('/orders.json' + queryParams)\n        .then(res => {\n            const fetchedOrders = [];\n            for(let key in res.data) {\n                fetchedOrders.push({\n                    ...res.data[key],\n                    id : key\n                })\n            }\n            dispatch(fetchOrdersSuccess(fetchedOrders));\n        })\n        .catch(err => {\n            dispatch(fetchOrdersFail(err));\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}