{"ast":null,"code":"var _jsxFileName = \"/home/asutosh/Documents/myReact/burger-builder/src/containers/Orders/Orders.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from '../../axios-orders';\nimport Order from '../../components/Order/Order';\nimport withErrorHandler from '../../withErrorHandler/withErrorHandler';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders(this.props.token, this.props.userId);\n  }\n\n  render() {\n    let orders = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 22\n      }\n    });\n\n    if (!this.props.loading) {\n      orders = this.props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, orders);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder/src/containers/Orders/Orders.js"],"names":["React","Component","connect","axios","Order","withErrorHandler","Spinner","actions","Orders","componentDidMount","props","onFetchOrders","token","userId","render","orders","loading","map","order","id","ingredients","price","mapStateToProps","state","auth","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,OAAOC,OAAP,MAAoB,qCAApB;AAEA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAE3BQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,KAApC,EAA0C,KAAKF,KAAL,CAAWG,MAArD;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,MAAM,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAG,CAAC,KAAKL,KAAL,CAAWM,OAAf,EAAwB;AACpBD,MAAAA,MAAM,GAAG,KAAKL,KAAL,CAAWK,MAAX,CAAkBE,GAAlB,CAAsBC,KAAK,iBAChC,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,QAAA,WAAW,EAAID,KAAK,CAACE,WAFzB;AAGI,QAAA,KAAK,EAAEF,KAAK,CAACG,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAT;AAOH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKN,MADL,CADJ;AAKH;;AAvB0B;;AA0B/B,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHR,IAAAA,MAAM,EAAEQ,KAAK,CAACL,KAAN,CAAYH,MADjB;AAEHC,IAAAA,OAAO,EAAEO,KAAK,CAACL,KAAN,CAAYF,OAFlB;AAGHJ,IAAAA,KAAK,EAAEW,KAAK,CAACC,IAAN,CAAWZ,KAHf;AAIHC,IAAAA,MAAM,EAAEU,KAAK,CAACC,IAAN,CAAWX;AAJhB,GAAP;AAMH,CAPD;;AASA,MAAMY,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHf,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkBa,QAAQ,CAACnB,OAAO,CAACoB,WAAR,CAAoBf,KAApB,EAA2BC,MAA3B,CAAD;AADtC,GAAP;AAGH,CAJD;;AAMA,eAAeX,OAAO,CAACoB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,gBAAgB,CAACG,MAAD,EAAQL,KAAR,CAA7D,CAAf","sourcesContent":["import React,{Component} from 'react'\nimport {connect} from 'react-redux'\nimport axios from '../../axios-orders'\n\nimport Order from '../../components/Order/Order'\nimport withErrorHandler from '../../withErrorHandler/withErrorHandler'\nimport Spinner from '../../components/UI/Spinner/Spinner'\n\nimport * as actions from '../../store/actions/index'\n\nclass Orders extends Component {\n\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token,this.props.userId);\n    }\n\n    render() {\n        let orders = <Spinner />;\n        if(!this.props.loading) {\n            orders = this.props.orders.map(order => (\n                <Order \n                    key={order.id} \n                    ingredients = {order.ingredients}\n                    price={order.price}\n                />\n            ))\n        }\n    \n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token,userId) => dispatch(actions.fetchOrders(token, userId))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders,axios));"]},"metadata":{},"sourceType":"module"}