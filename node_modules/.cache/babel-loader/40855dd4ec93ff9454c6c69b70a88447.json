{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationTime');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY';\n\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY';\n    }\n\n    axios.post(url, authData).then(response => {\n      const expirationTime = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationTime', expirationTime);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationTime = new Date(localStorage.getItem('expirationTime'));\n\n      if (expirationTime <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationTime.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","Date","getTime","data","expiresIn","setItem","localId","catch","err","console","log","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport * as actionTypes from './actionTypes'\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n}\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime*1000)\n    }\n}\n\nexport const auth = (email, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY'\n        if(!isSignup) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY'\n        }\n        axios.post(url, authData)\n        .then(response => {\n            const expirationTime =new Date(new Date().getTime() + response.data.expiresIn*1000)\n            localStorage.setItem('token', response.data.idToken)\n            localStorage.setItem('expirationTime', expirationTime)\n            localStorage.setItem('userId', response.data.localId)\n            dispatch(authSuccess(response.data.idToken, response.data.localId))\n            dispatch(checkAuthTimeout(response.data.expiresIn))\n        })\n        .catch(err => {\n            console.log(err);\n            dispatch(authFail(err.response.data.error));\n        });\n    }\n}\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n}\n\nexport const authCheckState =() => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if(!token) {\n            dispatch(logout());\n        } else {\n            const expirationTime = new Date(localStorage.getItem('expirationTime'))\n            if(expirationTime <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId')\n                dispatch(authSuccess(token, userId))\n                dispatch(checkAuthTimeout((expirationTime.getTime()- new Date().getTime())/1000))\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}