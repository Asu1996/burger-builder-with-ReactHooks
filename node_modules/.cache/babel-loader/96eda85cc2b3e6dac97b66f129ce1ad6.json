{"ast":null,"code":"import axios from'axios';import*as actionTypes from'./actionTypes';export var authStart=function authStart(){return{type:actionTypes.AUTH_START};};export var authSuccess=function authSuccess(token,userId){return{type:actionTypes.AUTH_SUCCESS,idToken:token,userId:userId};};export var authFail=function authFail(error){return{type:actionTypes.AUTH_FAIL,error:error};};export var logout=function logout(){localStorage.removeItem('token');localStorage.removeItem('expirationTime');localStorage.removeItem('userId');return{type:actionTypes.AUTH_LOGOUT};};export var checkAuthTimeout=function checkAuthTimeout(expirationTime){return function(dispatch){setTimeout(function(){dispatch(logout());},expirationTime*1000);};};export var auth=function auth(email,password,isSignup){return function(dispatch){dispatch(authStart());var authData={email:email,password:password,returnSecureToken:true};var url='https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY';if(!isSignup){url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY';}axios.post(url,authData).then(function(response){var expirationTime=new Date(new Date().getTime()+response.data.expiresIn*1000);localStorage.setItem('token',response.data.idToken);localStorage.setItem('expirationTime',expirationTime);localStorage.setItem('userId',response.data.localId);dispatch(authSuccess(response.data.idToken,response.data.localId));dispatch(checkAuthTimeout(response.data.expiresIn));}).catch(function(err){console.log(err);dispatch(authFail(err.response.data.error));});};};export var setAuthRedirectPath=function setAuthRedirectPath(path){return{type:actionTypes.SET_AUTH_REDIRECT_PATH,path:path};};export var authCheckState=function authCheckState(){return function(dispatch){var token=localStorage.getItem('token');if(!token){dispatch(logout());}else{var expirationTime=new Date(localStorage.getItem('expirationTime'));if(expirationTime<=new Date()){dispatch(logout());}else{var userId=localStorage.getItem('userId');dispatch(authSuccess(token,userId));dispatch(checkAuthTimeout((expirationTime.getTime()-new Date().getTime())/1000));}}};};","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","Date","getTime","data","expiresIn","setItem","localId","catch","err","console","log","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport * as actionTypes from './actionTypes'\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n}\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime*1000)\n    }\n}\n\nexport const auth = (email, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY'\n        if(!isSignup) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBxiKI5tTysmtMpXnQq8kU_0jvj2c79mZY'\n        }\n        axios.post(url, authData)\n        .then(response => {\n            const expirationTime =new Date(new Date().getTime() + response.data.expiresIn*1000)\n            localStorage.setItem('token', response.data.idToken)\n            localStorage.setItem('expirationTime', expirationTime)\n            localStorage.setItem('userId', response.data.localId)\n            dispatch(authSuccess(response.data.idToken, response.data.localId))\n            dispatch(checkAuthTimeout(response.data.expiresIn))\n        })\n        .catch(err => {\n            console.log(err);\n            dispatch(authFail(err.response.data.error));\n        });\n    }\n}\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n}\n\nexport const authCheckState =() => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if(!token) {\n            dispatch(logout());\n        } else {\n            const expirationTime = new Date(localStorage.getItem('expirationTime'))\n            if(expirationTime <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId')\n                dispatch(authSuccess(token, userId))\n                dispatch(checkAuthTimeout((expirationTime.getTime()- new Date().getTime())/1000))\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}