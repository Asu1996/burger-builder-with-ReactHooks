{"ast":null,"code":"var _jsxFileName = \"/home/asutosh/Documents/myReact/burger-builder-with-ReactHooks/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { useState } from 'react';\nimport axios from '../../../axios-orders';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../withErrorHandler/withErrorHandler';\nimport { updateObject, checkValidity } from '../../../shared/utility';\nimport * as actions from '../../../store/actions/index';\nimport classes from './ContactData.module.css';\n\nconst ContactData = props => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'YourName?'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'YourStreet?'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'YourZipCode?'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'YourCountry?'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'YourEmail?'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }]\n      },\n      value: 'fastest',\n      valid: true,\n      validation: {}\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    const order = {\n      ingredients: props.ings,\n      price: props.price,\n      orderData: formData,\n      userId: props.userId\n    };\n    props.onOrderBurger(order, props.token);\n  };\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, orderForm.validation),\n      touched: true\n    });\n    const updatedOrderForm = updateObject(orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  let form = /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: orderHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"ORDER\"));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 20\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, \"Enter your Contact Data\"), form);\n};\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder-with-ReactHooks/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","useState","axios","connect","Button","Spinner","Input","withErrorHandler","updateObject","checkValidity","actions","classes","ContactData","props","orderForm","setOrderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","state","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport axios from '../../../axios-orders'\nimport {connect} from 'react-redux'\n\nimport Button from '../../../components/UI/Button/Button'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport Input from '../../../components/UI/Input/Input'\nimport withErrorHandler from '../../../withErrorHandler/withErrorHandler'\nimport {updateObject,checkValidity} from '../../../shared/utility'\n\nimport * as actions from '../../../store/actions/index'\n\nimport classes from './ContactData.module.css'\n\nconst ContactData = props => {\n\n    const [orderForm, setOrderForm] = useState( {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'YourName?'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'YourStreet?'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'YourZipCode?'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'YourCountry?'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'YourEmail?'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod : {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                valid:true,\n                validation: {},\n\n            }\n        })\n        const [formIsValid, setFormIsValid] = useState(false)\n\n    const orderHandler = ( event ) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: props.ings,\n            price: props.price,\n            orderData: formData,\n            userId: props.userId\n        } ;\n        props.onOrderBurger(order, props.token);\n    }\n\n    const inputChangedHandler = (event, inputIdentifier) => {\n        \n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n            value:event.target.value,\n            valid:checkValidity(event.target.value, orderForm.validation),\n            touched:true\n\n        });\n        const updatedOrderForm = updateObject(orderForm, {\n            [inputIdentifier]: updatedFormElement\n        })\n            \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        setOrderForm(updatedOrderForm);\n        setFormIsValid(formIsValid);\n    }\n\n        const formElementsArray = [];\n        for (let key in orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!formIsValid}>ORDER</Button>\n            </form>\n        );\n        if ( props.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}