{"ast":null,"code":"var _jsxFileName = \"/home/asutosh/Documents/myReact/burger-builder-with-ReactHooks/src/containers/Auth/Auth.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport classes from './Auth.module.css';\n\nconst Auth = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'YourMail??'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'PASS??'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignup, setIsSignup] = useState(true);\n  useEffect(() => {\n    if (!props.buildingBurger && props.authRedirectPath !== '/') {\n      props.onSetAuthRedirectPath();\n    }\n  }, []);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(authForm, {\n      [controlName]: updateObject(authForm[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      })\n    });\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    setIsSignup(!isSignup);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 20\n      }\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, props.error.message);\n  }\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 28\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    clicked: switchAuthModeHandler,\n    btnType: \"Danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, \"switch to \", isSignup ? 'sign in!' : 'sign up!!'));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/asutosh/Documents/myReact/burger-builder-with-ReactHooks/src/containers/Auth/Auth.js"],"names":["React","useEffect","useState","connect","Redirect","Input","Button","actions","Spinner","updateObject","checkValidity","classes","Auth","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","setIsSignup","buildingBurger","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","switchAuthModeHandler","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","state","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\n\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport {updateObject, checkValidity} from '../../shared/utility'\n\n\nimport classes from './Auth.module.css'\n\nconst Auth = props => {\n    \n    const [authForm, setAuthForm] = useState({\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'YourMail??'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'PASS??'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        });\n    const [isSignup, setIsSignup] = useState(true);\n\n    useEffect(() => {\n        if(!props.buildingBurger && props.authRedirectPath !== '/') {\n            props.onSetAuthRedirectPath(); \n         }\n    }, [] )\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(authForm, {\n            [controlName]: updateObject(authForm[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n                touched: true\n            })\n        })\n        setAuthForm(updatedControls)\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onAuth(authForm.email.value,authForm.password.value, isSignup)\n    }\n\n    const switchAuthModeHandler = () => {\n        setIsSignup(!isSignup);\n    }\n\n        const formElementsArray = [];\n        for (let key in authForm) {\n            formElementsArray.push({\n                id: key,\n                config: authForm[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => inputChangedHandler(event, formElement.id)} \n            />\n        ));\n\n        if(props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if(props.error) {\n            errorMessage = (\n            <p>{props.error.message}</p>\n            )\n        }\n\n        let authRedirect=null;\n        if(props.isAuthenticated) {\n            authRedirect = <Redirect to={props.authRedirectPath}/>\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                    {form}\n                    <Button \n                        btnType=\"Success\" >SUBMIT\n                    </Button>\n                </form>\n                <Button \n                    clicked={switchAuthModeHandler}\n                    btnType=\"Danger\" >switch to {isSignup ? 'sign in!' : 'sign up!!' }\n                </Button>\n            </div>\n        );\n}\n\nconst mapStateToProps = state => {\n    return{\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password,isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}